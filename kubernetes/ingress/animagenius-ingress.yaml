apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: animagenius-ingress
  namespace: animagenius-production
  labels:
    app: animagenius
  annotations:
    # ALB Controller annotations
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: animagenius-production-alb
    
    # SSL/TLS
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:ACCOUNT-ID:certificate/CERTIFICATE-ID
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Health checks
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    
    # Load balancer attributes
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      idle_timeout.timeout_seconds=60,
      routing.http2.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=animagenius-alb-logs,
      access_logs.s3.prefix=production
    
    # Tags
    alb.ingress.kubernetes.io/tags: |
      Environment=production,
      Project=animagenius,
      Component=ingress
    
    # Security
    alb.ingress.kubernetes.io/wafv2-acl-arn: arn:aws:wafv2:us-east-1:ACCOUNT-ID:regional/webacl/animagenius-waf/WEBACL-ID
    
    # Rate limiting via annotations
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  rules:
  - host: api.animagenius.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: animagenius-api
            port:
              number: 80
  - host: animagenius.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: animagenius-api
            port:
              number: 80
      - path: /upload
        pathType: Prefix
        backend:
          service:
            name: animagenius-api
            port:
              number: 80
      - path: /worker
        pathType: Prefix
        backend:
          service:
            name: animagenius-worker
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: animagenius-frontend
            port:
              number: 80
  - host: www.animagenius.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: animagenius-frontend
            port:
              number: 80
  tls:
  - hosts:
    - animagenius.com
    - www.animagenius.com
    - api.animagenius.com
    secretName: animagenius-tls

---
# NGINX Ingress for advanced routing (alternative/additional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: animagenius-nginx-ingress
  namespace: animagenius-production
  labels:
    app: animagenius
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-connections: "10"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://animagenius.com,https://www.animagenius.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
    
    # Custom timeouts for upload endpoints
    nginx.ingress.kubernetes.io/server-snippet: |
      location /upload {
        client_max_body_size 500m;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        proxy_connect_timeout 30s;
      }
    
    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "animagenius-api"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    
spec:
  tls:
  - hosts:
    - animagenius.com
    - www.animagenius.com
    - api.animagenius.com
    secretName: animagenius-tls
  rules:
  - host: animagenius.com
    http:
      paths:
      - path: /api/v1/video/generate
        pathType: Prefix
        backend:
          service:
            name: animagenius-gpu-worker
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: animagenius-api
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: animagenius-frontend
            port:
              number: 80

---
# Network Policy for Ingress
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: animagenius-ingress-policy
  namespace: animagenius-production
spec:
  podSelector:
    matchLabels:
      app: animagenius
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 3001
    - protocol: TCP
      port: 3002